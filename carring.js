function sum(a) {

  let currentSum = a;

  function f(b) {
    currentSum += b;
    return f;
  }

  f.toString = function() { // сли убрать, то в консоль выведиться код со строки 5 - 8
    return currentSum;
  };

  return f;
}



console.log(sum(1)(2).toString());                       // == 3; // 1 + 2
console.log(sum(1)(2)(3).toString());                  // == 6; // 1 + 2 + 3
console.log(sum(5)(-1)(2).toString());                 //== 6
console.log(sum(6)(-1)(-2)(-3).toString());         // == 0
console.log(sum(0)(1)(2)(3)(4)(5).toString()); // == 15

/*
    Первый вызов "sum(1)" создает переменную под сумму, объявляет внутреннюю функцию f и возвращает ее,
    второй вызов "(2)" выполняет внутреннюю функцию f прибавляя 2 к сумме и возвращает обратно функцию f,
    т.е. результатом "sum(1)(2)" является внутренняя функция f о чем и сообщает консоль.

    Чтобы получить результат нам надо преобразовать функцию (которая является объектом) в примитивное
    значение, для этого и используются методы .toString, .valueOf и [Symbol.toPrimitive].
    В данном случае мы можем явно вызвать метод который мы задали вот так

    console.log(sum(1)(2).toString());

    или можем вызвать его же неявно используя конкатенацию с пустой строкой

    console.log(sum(1)(2) + '');
*/

// node carring