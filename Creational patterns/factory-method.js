/*
Основная цель этого патерна - создание класса, который в свою очередь будет помогать
создавать определенные объекты на основани каких-либо входных данных
Исходеный класс (фабрика) - это супер класс

Фабрика используеться, когда вам нужно создавать множество однотипных объектов.
Объекты с одинаковой структурой, но разными данными

Простая фабрика состоит двух классов - класса конструктора и
класса который вызывает класс конструктор для инстанса объекта и параметрами

Классав конструкторов может быть несколько, но второй класс вызывает один из них
в зависимости от переданного параметра
*/
class Bmw { // Так выглядит класс конструктор - однотипный объект с разными данными
  constructor(model, price, maxSpeed) {
    this.model = model;
    this.price = price;
    this.maxSpeed = maxSpeed;
  }
}

class BmwFactory { //вызывает класс конструктор с разными даными для инстанса обьекта
  create(type) {
    if (type === 'X5') {
      return new Bmw(type, 108000, 300)
    } else if (type === 'X6') {
      return new Bmw(type, 111000, 300)
    }
  }
}

const factory = new BmwFactory();
console.log(factory) // BmWFactory {}

const x5 = factory.create('X5');
const x6 = factory.create('X6');
console.log(x5) // Bmw { model: 'X5', price: 108000, maxSpeed: 300 }
console.log(x6) // Bmw { model: 'X6', price: 111000, maxSpeed: 300 }


/*
 Использование фабрики. Это сложность создания объектов в конструкторе.
 Чаще всего когда он может создаваться из нескольких источников,
 а также данный патерн хорошо подходит, когда вам нужно создавать несколько объектов
 с одинаковйо структурой, но разными данными.
 Заранее  точно не известный аргументы для объектов

  При большом количестве создаваемых объектов - структора фабричного метода разростаеться
  Это проблему решает шаблон абстактной фабрики
*/
//node factory-method.js