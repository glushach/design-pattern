/*
  Патерин Proxy или Заместитель
  Вместо реальных объектов предоставляет объекты заменитель.
  Они перехватывают вызов к оригиналам и позволяют что-то сделать до или после до
  обращения к оригинальному объекту. Это прослойка, котрая помогает произвести
  какие-то дополнительные манипуляции, до того, как отдать дальнейший контроль.


  Первый кейс - это автроизация. Когда вы заходиите на сайт, вас перебрасывает на страницу
  логина где выц можете автоизироваться. И в зависимости от вашего статуса авторизированы
  вы или нет у вас появляеться либо полный доступ к ресурсу либо частично ограничен
  либо поолностю закрыт.

  Предположим у нас есть автомобиль с головым управлением, где парольм стоит кодовое слово

  Пишем оригинальный класс по открытию автомобиля
*/
class CarAccess {
  open() {
    console.log('Opening car door');
  }

  close() {
    console.log('Closing the car door');
  }
}

/*
  Теперь реализуем прокси объект, который будет обеспечивать безопасность.
  открытия дверей. Своего рода голосовой валидатор
*/

class SecuritySystem {
  constructor(door) {
    this.door = door;
  }

  open(password) {
    if (this.authenticate(password)) {
      this.door.open();
    } else {
      console.log('Access denied!')
    }
  }

  authenticate(password) {
    return password === 'Ilon';
  }

  close() {
    this.door.close();
  }
}

/* В SecuritySystem метод open запрашивает идентификацию водителя.
   Просим его ввесли пароль или произнести его.
   В случае правильного ввода мы открываем двер.
   Ну и пердаем контроль на шаш оригинальный класс CarAccess. В случае же ошибки
   же говорим о то, что доступ закрыт. Причем данная данная охранная система.
   также оборачивает и метод close из CarAccess в свой собственный. Как вы можете выдеть
   мы создали прослойку между пользователем и оригинальным классом.
   Создалии своего рода заместителя с тем же интерфейцсом, что оригинальный класс
   CarAccess

   Мы создали пройлойку между пользователем и оригинальным классом, создали своего рода
   заместителя с тем же интерфейсом, что и оригинал.

   Мы создаем оригинал доступа к машине, но не просто экземпляр, а экземпляр обернутый
   в нашу охранную систему и теперь, чтобы получить доступ нам нужно ввести или произнести
   кодовое слово 'Ilon'
*/
const door = new SecuritySystem(new CarAccess());

door.open('Jack'); // Access denied!
door.open('Ilon')  // Opening car door
door.close()               // Closing the car dor


/* Прокси бывают разные. Например виртуальный прокси - аалог линивой загрузки,
  то есть заргузки тяжего объекта только в действительной необходимости в нем.
  Логирующиий прокси - хранение историй обращений.
  Защищающий - это то, что реализовали
  Кеширующий - частичное кеширование результатов запроса клиента и управление ими.


  ПРОКИСИ - прослойка между огмринальными объектами и это запросы обращены
  дляф допролнительных операций.

*/
// node proxy