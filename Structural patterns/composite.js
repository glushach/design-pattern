/* Копмроновщик позволяет сгрупировать множество объектов в древовидную
* структуру и работать с этой структурой так, как будто это один единственный объект.
*
* Ключевая структура данного патерна это ДЕРЕВО. Это объект со специфическим интерфейсом.
* Особенность данного интерфейса в том, что сам объекат мало что знает о вложенных в него
* структурах. Он просто реализует те же методы, что и влоаженные в него компоненты.
* Но вместо непосредственного вызова своего метода, он передает вызовы всем
* вложенным компонетам, а те компоненты в свою очередь передают эти вызовы
* в собственные структуры, то есть один исходный класс - содержит компоненты, которые в свою
* очередь также содержат компоненты. Это и есть древовидная структура.
* Все же вложенные компоненты в этой структуре можно назвать листьями связи между ними
* ветками
*
* Еще одна особенность этого патерна - это единый интерфейс вызова. Как было сказано в
* самам корневом компоненте никаких действий не происходит. Вызовы он переждает или
* делигирует во все вложенные компонерты по цепочке и методы вызываются непосредственно
* в каждом из них. */
class Equipment {
  getPrice() {
    return this.price || 0;
  }

  getName() {
    return this.name;
  }

  setName(name) {
    this.name = name;
  }

  setPrice(price) {
    this.price = price;
  }
}
/*Equipment поможет создавать объекты с единым интерфейсом взаимодействия,
* а это один из критериев патерна. То есть все вложенные компоненты будуть иметь одинаковые
* точки доступа */

/*Теперь перганяем все данные из условной таблиц в объекты с которыми сможем работать

* */

class Engine extends Equipment {
  constructor() {
    super();
    this.setName('Engine');
    this.setPrice(800);
  }
}

class Body extends Equipment {
  constructor() {
    super();
    this.setName('Body');
    this.setPrice(3000);
  }
}

class Tools extends Equipment {
  constructor() {
    super();
    this.setPrice('Tools');
    this.setPrice(4000);
  }
}

/*Создадим класс компоновщик, который будет просчитывать общую стоимость оборудования */

class Composite extends Equipment {
  constructor() {
    super();
    this.equipment = [];
  }

  add(equipment) {
    this.equipment.push(equipment);
  }

  getPrice() {
    return this.equipment
      .map(equipment => equipment.getPrice())
      .reduce((a, b) => a + b);
  }
}

/*Метод add добавляет оборудование в авто, а метод getPrice берет массив добавленного
 оборудования, пробегаеться по нему и вызывает метод getPrice у каждого, в результате
  чего появляеться массив цен, после чего с помощью reduce просумировать все значения
  Компоновщик готов. */

/*ТЕСТИРУЕМ*/
/*Создаем класс авто. Создаем экземпляр авто и комплектуем его всем необходимым.
  Затем проверяем итоговую стоимоть авто*/
class Car extends Composite {
  constructor() {
    super();
    this.setName('Audi');
  }
}

const myCar = new Car();

myCar.add(new Engine());
myCar.add(new Body());
myCar.add(new Tools());

console.log(`${myCar.getName()} price is ${myCar.getPrice()}`); // Audi price is 7800
/* Итог - компоновщик это патерн, который групирует множемтво объектов в древовидную
  структуру. У нас это массив equipment внутри класса Composite. Патерн работает
  со сложными компонентами через единый интерфейс с общим методом получения стоимости
  Причем получение стоимости он делает не самостоятельно, а вызывает соответсвующие методы
  внктри каждого из объектов. Сам же он просто возвращает итоговый результат работы
  делегированных методов. */
// node composite